(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{641:function(t,s){t.exports="https://pldq.gitee.io/assets/img/20200717161013.32f0d566.png"},642:function(t,s){t.exports="https://pldq.gitee.io/assets/img/20200717145211.5e2701e9.png"},643:function(t,s){t.exports="https://pldq.gitee.io/assets/img/20200717150222.3eadd4f1.png"},644:function(t,s){t.exports="https://pldq.gitee.io/assets/img/20200630145753.669bc596.png"},645:function(t,s){t.exports="https://pldq.gitee.io/assets/img/20200717155645.32de04fc.png"},646:function(t,s){t.exports="https://pldq.gitee.io/assets/img/20200717163258.6957e21a.png"},647:function(t,s){t.exports="https://pldq.gitee.io/assets/img/20200717163843.32b25d3a.jpg"},648:function(t,s){t.exports="https://pldq.gitee.io/assets/img/20200630145914.bffa94af.png"},649:function(t,s){t.exports="https://pldq.gitee.io/assets/img/20200717165539.651a583f.png"},702:function(t,s,a){"use strict";a.r(s);var n=a(9),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"背景"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#背景"}},[t._v("#")]),t._v(" 背景")]),t._v(" "),n("p",[t._v("对接海康SDK使用透传协议连接交换机时，发现每次透传调用都不成功，而SDK自带的DEMO却能够成功，反复确认文档发现自己调用的方式并没有什么错误的地方，但通过 wireshark 抓包却发现调用sdk透传的是空字符串，而 sdk 却有消息体，所以决定逆向 demo 程序")]),t._v(" "),n("p",[n("img",{staticClass:"lazy",attrs:{alt:"","data-src":a(641),loading:"lazy"}})]),t._v(" "),n("p",[t._v("透传说明文档指出，透传需要三个参数，"),n("code",[t._v("lUserID")]),t._v("、"),n("code",[t._v("lpInputParam")]),t._v("、"),n("code",[t._v("lpOutputParam")]),t._v("，传入结构体类型如下：")]),t._v(" "),n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tDWORD    dwSize"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v("     "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("lpRequestUrl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tDWORD    dwRequestUrlLen"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v("     "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("lpInBuffer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tDWORD    dwInBufferSize"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tDWORD    dwRecvTimeOut"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tBYTE     byForceEncrpt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tBYTE     byNumOfMultiPart"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tBYTE     byRes"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nNET_DVR_XML_CONFIG_INPUT"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("LPNET_DVR_XML_CONFIG_INPUT"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br")])]),n("h2",{attrs:{id:"准备工具"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#准备工具"}},[t._v("#")]),t._v(" 准备工具")]),t._v(" "),n("ul",[n("li",[t._v("Cheat Engine")])]),t._v(" "),n("h2",{attrs:{id:"过程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#过程"}},[t._v("#")]),t._v(" 过程")]),t._v(" "),n("ol",[n("li",[t._v("打开 Demo 程序"),n("br"),t._v(" "),n("img",{staticClass:"lazy",attrs:{alt:"","data-src":a(642),loading:"lazy"}})]),t._v(" "),n("li",[t._v("使用 Cheat Engine 附加 demo 进程"),n("br"),t._v(" "),n("img",{staticClass:"lazy",attrs:{alt:"","data-src":a(643),loading:"lazy"}})]),t._v(" "),n("li",[t._v("进入 Memory View -> Enumerate DLL's and Symbols，找到 sdk DLL 暴露出的透传API函数"),n("br"),t._v(" "),n("img",{staticClass:"lazy",attrs:{alt:"","data-src":a(644),loading:"lazy"}})]),t._v(" "),n("li",[t._v("直接进入函数下断点，使用 DEMO 进行协议透传，程序会执行到断点，但还不够，我们需要知道函数参数的值和类型"),n("br"),t._v(" "),n("img",{staticClass:"lazy",attrs:{alt:"","data-src":a(645),loading:"lazy"}})]),t._v(" "),n("li",[t._v("学过汇编的我们都知道，函数参数入栈是从右往左进行入栈的，并且栈的内存是从高到低排列的，栈顶位于内存低位")])]),t._v(" "),n("div",{staticClass:"language-text line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("mov [rsp+18],r8     # 第三个参数 lpOutputParam\nmov [rsp+10],rdx    # 第二个参数 lpInputParam\nmov [rsp+08],ecx    # 第一个参数 lUserID\nsub rsp,38          # 分配堆栈内存\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br")])]),n("p",[t._v("由于我们已经知道了参数类型和作用，直接去内存区域看 "),n("code",[t._v("lpInputParam")]),t._v(" 地址的对应参数值即可")]),t._v(" "),n("p",[n("img",{staticClass:"lazy",attrs:{alt:"","data-src":a(646),loading:"lazy"}})]),t._v(" "),n("p",[n("img",{staticClass:"lazy",attrs:{alt:"","data-src":a(647),loading:"lazy"}})]),t._v(" "),n("h3",{attrs:{id:"dissect-data-and-structure"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#dissect-data-and-structure"}},[t._v("#")]),t._v(" Dissect Data and Structure")]),t._v(" "),n("p",[t._v("此工具会根据上下文猜测结构字段类型，并且可以检查和比较内存区域或者结构体，通过此工具可以"),n("strong",[t._v("直接查看各个字段的值")])]),t._v(" "),n("p",[n("img",{staticClass:"lazy",attrs:{alt:"","data-src":a(648),loading:"lazy"}})]),t._v(" "),n("h2",{attrs:{id:"结果"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#结果"}},[t._v("#")]),t._v(" 结果")]),t._v(" "),n("p",[t._v("通过以上逆向操作可以知道 "),n("code",[t._v("lpInBuffer")]),t._v(" 传入的直接是 body 字符串，而不是 "),n("code",[t._v("NET_DVR_MIME_UNIT")]),t._v(" 结构体")]),t._v(" "),n("p",[t._v("这真的是 “木遇到水，我服了我服了...”")]),t._v(" "),n("p",[n("img",{staticClass:"lazy",attrs:{alt:"","data-src":a(649),loading:"lazy"}})])])}),[],!1,null,null,null);s.default=e.exports}}]);